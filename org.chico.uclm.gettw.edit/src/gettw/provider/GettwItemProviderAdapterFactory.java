/**
 */
package gettw.provider;

import gettw.util.GettwAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GettwItemProviderAdapterFactory extends GettwAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GettwItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.GETTWDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GETTWDiagramItemProvider gettwDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.GETTWDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGETTWDiagramAdapter() {
		if (gettwDiagramItemProvider == null) {
			gettwDiagramItemProvider = new GETTWDiagramItemProvider(this);
		}

		return gettwDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Picture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PictureItemProvider pictureItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Picture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPictureAdapter() {
		if (pictureItemProvider == null) {
			pictureItemProvider = new PictureItemProvider(this);
		}

		return pictureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Superscript} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuperscriptItemProvider superscriptItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Superscript}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuperscriptAdapter() {
		if (superscriptItemProvider == null) {
			superscriptItemProvider = new SuperscriptItemProvider(this);
		}

		return superscriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Subscript} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubscriptItemProvider subscriptItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Subscript}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubscriptAdapter() {
		if (subscriptItemProvider == null) {
			subscriptItemProvider = new SubscriptItemProvider(this);
		}

		return subscriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.TextIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextIndexItemProvider textIndexItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.TextIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextIndexAdapter() {
		if (textIndexItemProvider == null) {
			textIndexItemProvider = new TextIndexItemProvider(this);
		}

		return textIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Shape} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShapeItemProvider shapeItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Shape}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShapeAdapter() {
		if (shapeItemProvider == null) {
			shapeItemProvider = new ShapeItemProvider(this);
		}

		return shapeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Rectangle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RectangleItemProvider rectangleItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Rectangle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRectangleAdapter() {
		if (rectangleItemProvider == null) {
			rectangleItemProvider = new RectangleItemProvider(this);
		}

		return rectangleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.RoundedRectangle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoundedRectangleItemProvider roundedRectangleItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.RoundedRectangle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoundedRectangleAdapter() {
		if (roundedRectangleItemProvider == null) {
			roundedRectangleItemProvider = new RoundedRectangleItemProvider(this);
		}

		return roundedRectangleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Ellipse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EllipseItemProvider ellipseItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Ellipse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEllipseAdapter() {
		if (ellipseItemProvider == null) {
			ellipseItemProvider = new EllipseItemProvider(this);
		}

		return ellipseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Triangle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriangleItemProvider triangleItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Triangle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriangleAdapter() {
		if (triangleItemProvider == null) {
			triangleItemProvider = new TriangleItemProvider(this);
		}

		return triangleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Diamond} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiamondItemProvider diamondItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Diamond}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiamondAdapter() {
		if (diamondItemProvider == null) {
			diamondItemProvider = new DiamondItemProvider(this);
		}

		return diamondItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.TriangleDown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriangleDownItemProvider triangleDownItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.TriangleDown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriangleDownAdapter() {
		if (triangleDownItemProvider == null) {
			triangleDownItemProvider = new TriangleDownItemProvider(this);
		}

		return triangleDownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.TriangleLeft} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriangleLeftItemProvider triangleLeftItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.TriangleLeft}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriangleLeftAdapter() {
		if (triangleLeftItemProvider == null) {
			triangleLeftItemProvider = new TriangleLeftItemProvider(this);
		}

		return triangleLeftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.TriangleRight} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriangleRightItemProvider triangleRightItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.TriangleRight}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriangleRightAdapter() {
		if (triangleRightItemProvider == null) {
			triangleRightItemProvider = new TriangleRightItemProvider(this);
		}

		return triangleRightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Package} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageItemProvider packageItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Package}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageAdapter() {
		if (packageItemProvider == null) {
			packageItemProvider = new PackageItemProvider(this);
		}

		return packageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.CustomShape} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomShapeItemProvider customShapeItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.CustomShape}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomShapeAdapter() {
		if (customShapeItemProvider == null) {
			customShapeItemProvider = new CustomShapeItemProvider(this);
		}

		return customShapeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gettw.CustomLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomLinkItemProvider customLinkItemProvider;

	/**
	 * This creates an adapter for a {@link gettw.CustomLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomLinkAdapter() {
		if (customLinkItemProvider == null) {
			customLinkItemProvider = new CustomLinkItemProvider(this);
		}

		return customLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (gettwDiagramItemProvider != null) gettwDiagramItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (superscriptItemProvider != null) superscriptItemProvider.dispose();
		if (subscriptItemProvider != null) subscriptItemProvider.dispose();
		if (textIndexItemProvider != null) textIndexItemProvider.dispose();
		if (shapeItemProvider != null) shapeItemProvider.dispose();
		if (rectangleItemProvider != null) rectangleItemProvider.dispose();
		if (roundedRectangleItemProvider != null) roundedRectangleItemProvider.dispose();
		if (ellipseItemProvider != null) ellipseItemProvider.dispose();
		if (triangleItemProvider != null) triangleItemProvider.dispose();
		if (diamondItemProvider != null) diamondItemProvider.dispose();
		if (triangleDownItemProvider != null) triangleDownItemProvider.dispose();
		if (triangleLeftItemProvider != null) triangleLeftItemProvider.dispose();
		if (triangleRightItemProvider != null) triangleRightItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (packageItemProvider != null) packageItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (pictureItemProvider != null) pictureItemProvider.dispose();
		if (customShapeItemProvider != null) customShapeItemProvider.dispose();
		if (customLinkItemProvider != null) customLinkItemProvider.dispose();
	}

}
